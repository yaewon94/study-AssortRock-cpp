// 메모리 영역
//
// 1. 스택영역 : 함수, 지역변수
// * first in last out 구조
// * 할당 : 함수가 호출된 시점
// * 제거 : 함수 호출이 종료될 때
// * 호출규칙
//		__cdecl (반환값을 리턴하고, 호출자에 의해 스택 제거)
//		__stdcall (반환값을 레지스터 메모리에 저장한 뒤, 함수 스스로 스택을 제거하고, 레지스터 메모리에 저장된 값 리턴)
// * 함수 내부의 명령어는 ROM에 저장되는거지, 스택에 저장되는게 아님
// * 스택의 크기는 제한적이므로, 스택이 너무 많이 쌓이면 스택 오버플로우 발생함
// * 다른 함수의 지역변수에는 접근 불가능 (포인터 제외)
// 
// 2. 데이터 영역 : 전역변수, 정적변수
// * 프로그램 시작 시 초기화, 종료 시 해제
//
// 3. 힙 : 동적할당 영역
// 4. ROM(Read Only Memory) : 코드 및 초기화 데이터(ex.상수 리터럴)
//

#include "FunctionTest.h"

int global = 0;

int Test1()
{
	// (함수 내부에서 선언된) 정적변수
	// 선언된 함수 내부에서만 사용 가능
	static int s = 0; // 최초 1회만 초기화
	
	return ++s;
}

int main()
{
	// 모든 함수에서 전역변수에 접근 가능 (보안 취약)
	global++;

	// main() 내의 지역변수
	int i = 0;

	Test1();
	Test1();
	Test1();

	Test2();

	return 0;
}
